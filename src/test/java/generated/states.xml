<?xml version="1.0" encoding="UTF-8"?>
<java version="1.7.0_13" class="java.beans.XMLDecoder">
 <object class="java.util.HashMap">
  <void method="put">
   <long>1</long>
   <object class="com.crawljax.core.state.StateVertex">
    <void property="dom">
     <string>&lt;HTML xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&#13;
&lt;HEAD&gt;&#13;
&lt;META http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&#13;
&#13;
&lt;META content=&quot;text/html; charset=ISO-8859-1&quot; http-equiv=&quot;content-type&quot;&gt;&#13;
		&#13;
&lt;STYLE type=&quot;text/css&quot;&gt;&#13;
			#board table {&#13;
				border-collapse: collapse;&#13;
			}&#13;
			#board td {&#13;
				height: 25px;&#13;
				width: 25px;&#13;
			}&#13;
		&lt;/STYLE&gt;&#13;
	&#13;
		&#13;
&lt;SCRIPT src=&quot;same-game_files/jquery.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/SCRIPT&gt;&#13;
		&lt;SCRIPT src=&quot;same-game_files/seedrandom-min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/SCRIPT&gt;&#13;
		&#13;
		&lt;SCRIPT type=&quot;text/javascript&quot;&gt;&#13;
			var board = new Array();&#13;
			var checked = new Array();&#13;
			var colours = new Array(&apos;#000&apos;, &apos;#f00&apos;, &apos;#0f0&apos;, &apos;#00f&apos;); //, &apos;#ff0&apos;);*/&#13;
			var width = 5;&#13;
			var height = 5;&#13;
			test3=new Object();&#13;
			&#13;
			&#13;
			/* create a new array same size as the board */&#13;
			function clearChecked() {&#13;
				/* create a &apos;checked&apos; array to make sure we don&apos;t check same&#13;
				   cells over and over again. */&#13;
				&#13;
				&#13;
				test=new Object();&#13;
				test.test1=new Object();&#13;
				test.test1.test2=4;&#13;
				test3.test5=4;&#13;
				checked = new Array();&#13;
				for(var y = 0; y &amp;lt; height; y++) {&#13;
					var row = new Array();&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						row.push(false);&#13;
					}&#13;
					checked.push(row);&#13;
				}&#13;
				&#13;
	&#13;
			}&#13;
&#13;
			/* checks whether the clicked cell has at least one equal&#13;
			   neighbour */&#13;
			function equalNeighbour(x, y) {&#13;
			&#13;
				var value = board[y][x];&#13;
&#13;
				if(value == 0) {&#13;
					return false;&#13;
				}&#13;
&#13;
				if(x &amp;lt; width - 1 &amp;amp;&amp;amp; board[y][x + 1] == value) {&#13;
					return true;&#13;
				}&#13;
				if(x &amp;gt; 0 &amp;amp;&amp;amp; board[y][x - 1] == value) {&#13;
					return true;&#13;
				}&#13;
				if(y &amp;gt; 0 &amp;amp;&amp;amp; board[y - 1][x] == value) {&#13;
					return true;&#13;
				}&#13;
				if(y &amp;lt; height - 1 &amp;amp;&amp;amp; board[y + 1][x] == value) {&#13;
					return true;&#13;
				}&#13;
				return false;&#13;
			}&#13;
&#13;
			/* marks an item and its parents if they have equal colour */&#13;
			function mark(x, y, value) {&#13;
&#13;
&#13;
				if(!checked[y][x] &amp;amp;&amp;amp; board[y][x] &amp;gt; 0&#13;
						&amp;amp;&amp;amp; board[y][x] == value) {&#13;
&#13;
					board[y][x] = 0;&#13;
					checked[y][x] = true;&#13;
&#13;
					if(x &amp;lt; width - 1) {&#13;
						mark(x + 1, y, value);&#13;
					}&#13;
					if(x &amp;gt; 0) {&#13;
						mark(x - 1, y, value);&#13;
					}&#13;
					if(y &amp;gt; 0) {&#13;
						mark(x, y - 1, value);&#13;
					}&#13;
					if(y &amp;lt; height - 1) {&#13;
						mark(x, y + 1, value);&#13;
					}&#13;
				}&#13;
			}&#13;
&#13;
			/* move empty cells up */&#13;
			function compactDown() {&#13;
				var found = false;&#13;
				for(var x = 0; x &amp;lt; width; x++) {&#13;
					for(var y = 0; y &amp;lt; height - 1; y++) {&#13;
						if(board[y][x] != 0) {&#13;
							if(board[y + 1][x] == 0) {&#13;
								board[y + 1][x] = board[y][x];&#13;
								board[y][x] = 0;&#13;
&#13;
								found = true;&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
				return found;&#13;
			}&#13;
&#13;
			/* move empty cells to right */&#13;
			function compactLeft() {&#13;
				var found = false;&#13;
&#13;
				for(var x = 0; x &amp;lt; width; x++) {&#13;
					var empty = 0;&#13;
&#13;
					for(var y = 0; y &amp;lt; height; y++) {&#13;
						if(board[y][x] == 0) {&#13;
							empty++;&#13;
						}	&#13;
					}&#13;
					/* we have an empty column */&#13;
					if(empty == height) {&#13;
						for(var y = 0; y &amp;lt; height; y++) {&#13;
							for(var lx = x; lx &amp;lt; width - 1; lx++) {&#13;
								board[y][lx] = board[y][lx + 1];&#13;
							}&#13;
							board[y][board[y].length - 1] = 0;&#13;
							found = true;&#13;
						}&#13;
					}&#13;
				}&#13;
&#13;
				return found;&#13;
			}&#13;
&#13;
			/* generate an array with random values of these dimensions */&#13;
			function randomValues(width, height) {&#13;
				var result = new Array();&#13;
&#13;
				for(var y = 0; y &amp;lt; height; y++) {&#13;
					var row = new Array();&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						row.push(Math.round(Math.random() * 10 % (colours.length - 2) + 1));&#13;
					}&#13;
					result.push(row);&#13;
				}&#13;
&#13;
				return result;&#13;
			}&#13;
&#13;
			/* draw the board array as a table */&#13;
			function drawNewBoard() {&#13;
				var result = jQuery(&apos;&amp;lt;table&amp;gt;&amp;lt;/table&amp;gt;&apos;);&#13;
				for(var y = 0; y &amp;lt; board.length; y++) {&#13;
					var tmp = &apos;&amp;lt;tr&amp;gt;&apos;;&#13;
					for(var x = 0; x &amp;lt; board[y].length; x++) {&#13;
						tmp += &apos;&amp;lt;td id=&quot;&apos; + x + &apos;-&apos; + y + &apos;&quot; style=&quot;background: &apos; + colours[board[y][x]] + &apos;;&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/td&amp;gt;&apos;;&#13;
					}&#13;
					tmp += &apos;&amp;lt;/tr&amp;gt;&apos;;&#13;
					result.append(tmp);&#13;
				}&#13;
				/* add the table to the DOM */&#13;
				jQuery(&apos;#board&apos;).append(result);&#13;
			&#13;
		&#13;
				updateBoard();&#13;
			}&#13;
&#13;
			/* redraw board and re-generate unique data attribute */&#13;
			function updateBoard() {&#13;
				/* counter for number of cells that can be clicked */&#13;
				var clickables = 0;&#13;
				/* count all colours in this array */&#13;
				var numCells = new Array();&#13;
				for(var i = 0; i &amp;lt; colours.length; i++) {&#13;
					numCells.push(0);&#13;
				}&#13;
&#13;
				for(var y=0; y &amp;lt; height; y++) {&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						var element = jQuery(&apos;#board #&apos; + x + &apos;-&apos; + y);&#13;
						element.css(&apos;background&apos;, colours[board[y][x]]);&#13;
&#13;
						numCells[board[y][x]]++;&#13;
						element.attr(&apos;data&apos;, Math.random());&#13;
&#13;
						element.unbind(&apos;click&apos;);&#13;
						/* add onclick events only if it is not useless */&#13;
						if(equalNeighbour(x, y)) {&#13;
							clickables++;&#13;
							element.click(cellClicked);&#13;
							element.addClass(&apos;clickable&apos;);&#13;
						} else {&#13;
							element.removeClass(&apos;clickable&apos;);&#13;
						}&#13;
					}&#13;
				}&#13;
			&#13;
				/* check if all colours are gone */&#13;
				if(numCells[0] != (width * height)) {&#13;
					if(clickables == 0) {&#13;
						jQuery(&apos;#board&apos;).append(&apos;No clickables left, game over!&apos;);&#13;
					}&#13;
					return;&#13;
				}&#13;
				&#13;
				/* apparently, there is nothing left, so game finished */&#13;
				jQuery(&apos;#board&apos;).append(&apos;Game finished, well done!&apos;);&#13;
			}&#13;
&#13;
			/* fired when a cell is clicked */&#13;
			function cellClicked() {&#13;
&#13;
				&#13;
					var coords = jQuery(this).attr(&apos;id&apos;).split(&apos;-&apos;);&#13;
					var x = parseInt(coords[0]);&#13;
					var y = parseInt(coords[1]);&#13;
&#13;
					if(equalNeighbour(x, y)) {&#13;
						clearChecked();&#13;
&#13;
						mark(x, y, board[y][x]);&#13;
&#13;
						for(var i = 0; i &amp;lt; height; i++) {&#13;
							if(!compactDown()) {&#13;
								break;&#13;
							}&#13;
						}&#13;
						for(var i = 0; i &amp;lt; width; i++) {&#13;
							if(!compactLeft()) {&#13;
								break;&#13;
							}&#13;
						}&#13;
					}&#13;
				&#13;
					/* redraw to regenerate unique data attribute */&#13;
				&#13;
					updateBoard();&#13;
					&#13;
			}&#13;
&#13;
			jQuery(function() {&#13;
			&#13;
	/*			board=[[2,1,2,1,2], [2,3,2,2,2], [2,2,2,2,1], [1,1,2,1,3], [2,3,2,2,1]];&#13;
				checked=[[false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false]];&#13;
				mark(1,1,3);&#13;
				document.write(board);&#13;
	*/			Math.seedrandom(&apos;10&apos;);&#13;
				board = randomValues(width, height);&#13;
				drawNewBoard();&#13;
		//		updateBoard();	&#13;
				&#13;
				&#13;
				&#13;
			});&#13;
		&lt;/SCRIPT&gt;&#13;
	&#13;
&lt;/HEAD&gt;&#13;
&lt;BODY&gt;&#13;
	&#13;
		&#13;
&lt;DIV id=&quot;board&quot;&gt;&#13;
 	&#13;
		&#13;
&lt;TABLE&gt;&#13;
&lt;TBODY&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.7724183677331298&quot; id=&quot;0-0&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.011805882592215816&quot; id=&quot;1-0&quot; style=&quot;background: #f00;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.3918510093175643&quot; id=&quot;2-0&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.7552508434524654&quot; id=&quot;3-0&quot; style=&quot;background: #f00;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.13364304899729315&quot; id=&quot;4-0&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.5750867277181322&quot; id=&quot;0-1&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.5838078595807504&quot; id=&quot;1-1&quot; style=&quot;background: #00f;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.3056261997781625&quot; id=&quot;2-1&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.20002768552308786&quot; id=&quot;3-1&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.15481813331861174&quot; id=&quot;4-1&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.48853693057807257&quot; id=&quot;0-2&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.9739437170893994&quot; id=&quot;1-2&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.2124747103109626&quot; id=&quot;2-2&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.6842761499629744&quot; id=&quot;3-2&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.8838305083718236&quot; id=&quot;4-2&quot; style=&quot;background: #f00;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.9333629064453034&quot; id=&quot;0-3&quot; style=&quot;background: #f00;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.4104470161931893&quot; id=&quot;1-3&quot; style=&quot;background: #f00;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.8801207221870305&quot; id=&quot;2-3&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.491551570096656&quot; id=&quot;3-3&quot; style=&quot;background: #f00;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.9211346762428915&quot; id=&quot;4-3&quot; style=&quot;background: #00f;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD data=&quot;0.11027268415020437&quot; id=&quot;0-4&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.729430456320322&quot; id=&quot;1-4&quot; style=&quot;background: #00f;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.3750365466422817&quot; id=&quot;2-4&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.5837017981542745&quot; id=&quot;3-4&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.7624368053960692&quot; id=&quot;4-4&quot; style=&quot;background: #f00;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;/TBODY&gt;&#13;
&lt;/TABLE&gt;&#13;
&lt;/DIV&gt;&#13;
&#13;
&#13;
&lt;/BODY&gt;&#13;
&lt;/HTML&gt;&#13;
</string>
    </void>
    <void property="id">
     <long>1</long>
    </void>
    <void property="name">
     <string>index</string>
    </void>
   </object>
  </void>
  <void method="put">
   <long>2</long>
   <object class="com.crawljax.core.state.StateVertex">
    <void property="dom">
     <string>&lt;HTML xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&#13;
&lt;HEAD&gt;&#13;
&lt;META http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&#13;
&#13;
&lt;META content=&quot;text/html; charset=ISO-8859-1&quot; http-equiv=&quot;content-type&quot;&gt;&#13;
		&#13;
&lt;STYLE type=&quot;text/css&quot;&gt;&#13;
			#board table {&#13;
				border-collapse: collapse;&#13;
			}&#13;
			#board td {&#13;
				height: 25px;&#13;
				width: 25px;&#13;
			}&#13;
		&lt;/STYLE&gt;&#13;
	&#13;
		&#13;
&lt;SCRIPT src=&quot;same-game_files/jquery.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/SCRIPT&gt;&#13;
		&lt;SCRIPT src=&quot;same-game_files/seedrandom-min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/SCRIPT&gt;&#13;
		&#13;
		&lt;SCRIPT type=&quot;text/javascript&quot;&gt;&#13;
			var board = new Array();&#13;
			var checked = new Array();&#13;
			var colours = new Array(&apos;#000&apos;, &apos;#f00&apos;, &apos;#0f0&apos;, &apos;#00f&apos;); //, &apos;#ff0&apos;);*/&#13;
			var width = 5;&#13;
			var height = 5;&#13;
			test3=new Object();&#13;
			&#13;
			&#13;
			/* create a new array same size as the board */&#13;
			function clearChecked() {&#13;
				/* create a &apos;checked&apos; array to make sure we don&apos;t check same&#13;
				   cells over and over again. */&#13;
				&#13;
				&#13;
				test=new Object();&#13;
				test.test1=new Object();&#13;
				test.test1.test2=4;&#13;
				test3.test5=4;&#13;
				checked = new Array();&#13;
				for(var y = 0; y &amp;lt; height; y++) {&#13;
					var row = new Array();&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						row.push(false);&#13;
					}&#13;
					checked.push(row);&#13;
				}&#13;
				&#13;
	&#13;
			}&#13;
&#13;
			/* checks whether the clicked cell has at least one equal&#13;
			   neighbour */&#13;
			function equalNeighbour(x, y) {&#13;
			&#13;
				var value = board[y][x];&#13;
&#13;
				if(value == 0) {&#13;
					return false;&#13;
				}&#13;
&#13;
				if(x &amp;lt; width - 1 &amp;amp;&amp;amp; board[y][x + 1] == value) {&#13;
					return true;&#13;
				}&#13;
				if(x &amp;gt; 0 &amp;amp;&amp;amp; board[y][x - 1] == value) {&#13;
					return true;&#13;
				}&#13;
				if(y &amp;gt; 0 &amp;amp;&amp;amp; board[y - 1][x] == value) {&#13;
					return true;&#13;
				}&#13;
				if(y &amp;lt; height - 1 &amp;amp;&amp;amp; board[y + 1][x] == value) {&#13;
					return true;&#13;
				}&#13;
				return false;&#13;
			}&#13;
&#13;
			/* marks an item and its parents if they have equal colour */&#13;
			function mark(x, y, value) {&#13;
&#13;
&#13;
				if(!checked[y][x] &amp;amp;&amp;amp; board[y][x] &amp;gt; 0&#13;
						&amp;amp;&amp;amp; board[y][x] == value) {&#13;
&#13;
					board[y][x] = 0;&#13;
					checked[y][x] = true;&#13;
&#13;
					if(x &amp;lt; width - 1) {&#13;
						mark(x + 1, y, value);&#13;
					}&#13;
					if(x &amp;gt; 0) {&#13;
						mark(x - 1, y, value);&#13;
					}&#13;
					if(y &amp;gt; 0) {&#13;
						mark(x, y - 1, value);&#13;
					}&#13;
					if(y &amp;lt; height - 1) {&#13;
						mark(x, y + 1, value);&#13;
					}&#13;
				}&#13;
			}&#13;
&#13;
			/* move empty cells up */&#13;
			function compactDown() {&#13;
				var found = false;&#13;
				for(var x = 0; x &amp;lt; width; x++) {&#13;
					for(var y = 0; y &amp;lt; height - 1; y++) {&#13;
						if(board[y][x] != 0) {&#13;
							if(board[y + 1][x] == 0) {&#13;
								board[y + 1][x] = board[y][x];&#13;
								board[y][x] = 0;&#13;
&#13;
								found = true;&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
				return found;&#13;
			}&#13;
&#13;
			/* move empty cells to right */&#13;
			function compactLeft() {&#13;
				var found = false;&#13;
&#13;
				for(var x = 0; x &amp;lt; width; x++) {&#13;
					var empty = 0;&#13;
&#13;
					for(var y = 0; y &amp;lt; height; y++) {&#13;
						if(board[y][x] == 0) {&#13;
							empty++;&#13;
						}	&#13;
					}&#13;
					/* we have an empty column */&#13;
					if(empty == height) {&#13;
						for(var y = 0; y &amp;lt; height; y++) {&#13;
							for(var lx = x; lx &amp;lt; width - 1; lx++) {&#13;
								board[y][lx] = board[y][lx + 1];&#13;
							}&#13;
							board[y][board[y].length - 1] = 0;&#13;
							found = true;&#13;
						}&#13;
					}&#13;
				}&#13;
&#13;
				return found;&#13;
			}&#13;
&#13;
			/* generate an array with random values of these dimensions */&#13;
			function randomValues(width, height) {&#13;
				var result = new Array();&#13;
&#13;
				for(var y = 0; y &amp;lt; height; y++) {&#13;
					var row = new Array();&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						row.push(Math.round(Math.random() * 10 % (colours.length - 2) + 1));&#13;
					}&#13;
					result.push(row);&#13;
				}&#13;
&#13;
				return result;&#13;
			}&#13;
&#13;
			/* draw the board array as a table */&#13;
			function drawNewBoard() {&#13;
				var result = jQuery(&apos;&amp;lt;table&amp;gt;&amp;lt;/table&amp;gt;&apos;);&#13;
				for(var y = 0; y &amp;lt; board.length; y++) {&#13;
					var tmp = &apos;&amp;lt;tr&amp;gt;&apos;;&#13;
					for(var x = 0; x &amp;lt; board[y].length; x++) {&#13;
						tmp += &apos;&amp;lt;td id=&quot;&apos; + x + &apos;-&apos; + y + &apos;&quot; style=&quot;background: &apos; + colours[board[y][x]] + &apos;;&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/td&amp;gt;&apos;;&#13;
					}&#13;
					tmp += &apos;&amp;lt;/tr&amp;gt;&apos;;&#13;
					result.append(tmp);&#13;
				}&#13;
				/* add the table to the DOM */&#13;
				jQuery(&apos;#board&apos;).append(result);&#13;
			&#13;
		&#13;
				updateBoard();&#13;
			}&#13;
&#13;
			/* redraw board and re-generate unique data attribute */&#13;
			function updateBoard() {&#13;
				/* counter for number of cells that can be clicked */&#13;
				var clickables = 0;&#13;
				/* count all colours in this array */&#13;
				var numCells = new Array();&#13;
				for(var i = 0; i &amp;lt; colours.length; i++) {&#13;
					numCells.push(0);&#13;
				}&#13;
&#13;
				for(var y=0; y &amp;lt; height; y++) {&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						var element = jQuery(&apos;#board #&apos; + x + &apos;-&apos; + y);&#13;
						element.css(&apos;background&apos;, colours[board[y][x]]);&#13;
&#13;
						numCells[board[y][x]]++;&#13;
						element.attr(&apos;data&apos;, Math.random());&#13;
&#13;
						element.unbind(&apos;click&apos;);&#13;
						/* add onclick events only if it is not useless */&#13;
						if(equalNeighbour(x, y)) {&#13;
							clickables++;&#13;
							element.click(cellClicked);&#13;
							element.addClass(&apos;clickable&apos;);&#13;
						} else {&#13;
							element.removeClass(&apos;clickable&apos;);&#13;
						}&#13;
					}&#13;
				}&#13;
			&#13;
				/* check if all colours are gone */&#13;
				if(numCells[0] != (width * height)) {&#13;
					if(clickables == 0) {&#13;
						jQuery(&apos;#board&apos;).append(&apos;No clickables left, game over!&apos;);&#13;
					}&#13;
					return;&#13;
				}&#13;
				&#13;
				/* apparently, there is nothing left, so game finished */&#13;
				jQuery(&apos;#board&apos;).append(&apos;Game finished, well done!&apos;);&#13;
			}&#13;
&#13;
			/* fired when a cell is clicked */&#13;
			function cellClicked() {&#13;
&#13;
				&#13;
					var coords = jQuery(this).attr(&apos;id&apos;).split(&apos;-&apos;);&#13;
					var x = parseInt(coords[0]);&#13;
					var y = parseInt(coords[1]);&#13;
&#13;
					if(equalNeighbour(x, y)) {&#13;
						clearChecked();&#13;
&#13;
						mark(x, y, board[y][x]);&#13;
&#13;
						for(var i = 0; i &amp;lt; height; i++) {&#13;
							if(!compactDown()) {&#13;
								break;&#13;
							}&#13;
						}&#13;
						for(var i = 0; i &amp;lt; width; i++) {&#13;
							if(!compactLeft()) {&#13;
								break;&#13;
							}&#13;
						}&#13;
					}&#13;
				&#13;
					/* redraw to regenerate unique data attribute */&#13;
				&#13;
					updateBoard();&#13;
					&#13;
			}&#13;
&#13;
			jQuery(function() {&#13;
			&#13;
	/*			board=[[2,1,2,1,2], [2,3,2,2,2], [2,2,2,2,1], [1,1,2,1,3], [2,3,2,2,1]];&#13;
				checked=[[false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false]];&#13;
				mark(1,1,3);&#13;
				document.write(board);&#13;
	*/			Math.seedrandom(&apos;10&apos;);&#13;
				board = randomValues(width, height);&#13;
				drawNewBoard();&#13;
		//		updateBoard();	&#13;
				&#13;
				&#13;
				&#13;
			});&#13;
		&lt;/SCRIPT&gt;&#13;
	&#13;
&lt;/HEAD&gt;&#13;
&lt;BODY&gt;&#13;
	&#13;
		&#13;
&lt;DIV id=&quot;board&quot;&gt;&#13;
 	&#13;
		&#13;
&lt;TABLE&gt;&#13;
&lt;TBODY&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.416083224284376&quot; id=&quot;0-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.8643651488444563&quot; id=&quot;1-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.8917912587131162&quot; id=&quot;2-0&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.9363504869045477&quot; id=&quot;3-0&quot; style=&quot;background: #f00;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.9172333627593038&quot; id=&quot;4-0&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.15623368358529552&quot; id=&quot;0-1&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.054576124846266845&quot; id=&quot;1-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.850490514340408&quot; id=&quot;2-1&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.6972442597664674&quot; id=&quot;3-1&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.24626905933403148&quot; id=&quot;4-1&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.13384697157874234&quot; id=&quot;0-2&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.6850410419355364&quot; id=&quot;1-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 255);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.050410412816348435&quot; id=&quot;2-2&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.9788133587739802&quot; id=&quot;3-2&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.0004916205353470573&quot; id=&quot;4-2&quot; style=&quot;background: #f00;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.37995337238395804&quot; id=&quot;0-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 255, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.16777101980323067&quot; id=&quot;1-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 255, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.1236982897214887&quot; id=&quot;2-3&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.5569390406982396&quot; id=&quot;3-3&quot; style=&quot;background: #f00;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.8293482803327832&quot; id=&quot;4-3&quot; style=&quot;background: #00f;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.36319435616332524&quot; id=&quot;0-4&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.9631109873300688&quot; id=&quot;1-4&quot; style=&quot;background: #00f;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.026218323916643152&quot; id=&quot;2-4&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.3623055768688855&quot; id=&quot;3-4&quot; style=&quot;background: #0f0;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.033546830406605194&quot; id=&quot;4-4&quot; style=&quot;background: #f00;&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;/TBODY&gt;&#13;
&lt;/TABLE&gt;&#13;
&lt;/DIV&gt;&#13;
&#13;
&#13;
&lt;/BODY&gt;&#13;
&lt;/HTML&gt;&#13;
</string>
    </void>
    <void property="id">
     <long>2</long>
    </void>
    <void property="name">
     <string>state1</string>
    </void>
   </object>
  </void>
  <void method="put">
   <long>3</long>
   <object class="com.crawljax.core.state.StateVertex">
    <void property="dom">
     <string>&lt;HTML xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&#13;
&lt;HEAD&gt;&#13;
&lt;META http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&#13;
&#13;
&lt;META content=&quot;text/html; charset=ISO-8859-1&quot; http-equiv=&quot;content-type&quot;&gt;&#13;
		&#13;
&lt;STYLE type=&quot;text/css&quot;&gt;&#13;
			#board table {&#13;
				border-collapse: collapse;&#13;
			}&#13;
			#board td {&#13;
				height: 25px;&#13;
				width: 25px;&#13;
			}&#13;
		&lt;/STYLE&gt;&#13;
	&#13;
		&#13;
&lt;SCRIPT src=&quot;same-game_files/jquery.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/SCRIPT&gt;&#13;
		&lt;SCRIPT src=&quot;same-game_files/seedrandom-min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/SCRIPT&gt;&#13;
		&#13;
		&lt;SCRIPT type=&quot;text/javascript&quot;&gt;&#13;
			var board = new Array();&#13;
			var checked = new Array();&#13;
			var colours = new Array(&apos;#000&apos;, &apos;#f00&apos;, &apos;#0f0&apos;, &apos;#00f&apos;); //, &apos;#ff0&apos;);*/&#13;
			var width = 5;&#13;
			var height = 5;&#13;
			test3=new Object();&#13;
			&#13;
			&#13;
			/* create a new array same size as the board */&#13;
			function clearChecked() {&#13;
				/* create a &apos;checked&apos; array to make sure we don&apos;t check same&#13;
				   cells over and over again. */&#13;
				&#13;
				&#13;
				test=new Object();&#13;
				test.test1=new Object();&#13;
				test.test1.test2=4;&#13;
				test3.test5=4;&#13;
				checked = new Array();&#13;
				for(var y = 0; y &amp;lt; height; y++) {&#13;
					var row = new Array();&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						row.push(false);&#13;
					}&#13;
					checked.push(row);&#13;
				}&#13;
				&#13;
	&#13;
			}&#13;
&#13;
			/* checks whether the clicked cell has at least one equal&#13;
			   neighbour */&#13;
			function equalNeighbour(x, y) {&#13;
			&#13;
				var value = board[y][x];&#13;
&#13;
				if(value == 0) {&#13;
					return false;&#13;
				}&#13;
&#13;
				if(x &amp;lt; width - 1 &amp;amp;&amp;amp; board[y][x + 1] == value) {&#13;
					return true;&#13;
				}&#13;
				if(x &amp;gt; 0 &amp;amp;&amp;amp; board[y][x - 1] == value) {&#13;
					return true;&#13;
				}&#13;
				if(y &amp;gt; 0 &amp;amp;&amp;amp; board[y - 1][x] == value) {&#13;
					return true;&#13;
				}&#13;
				if(y &amp;lt; height - 1 &amp;amp;&amp;amp; board[y + 1][x] == value) {&#13;
					return true;&#13;
				}&#13;
				return false;&#13;
			}&#13;
&#13;
			/* marks an item and its parents if they have equal colour */&#13;
			function mark(x, y, value) {&#13;
&#13;
&#13;
				if(!checked[y][x] &amp;amp;&amp;amp; board[y][x] &amp;gt; 0&#13;
						&amp;amp;&amp;amp; board[y][x] == value) {&#13;
&#13;
					board[y][x] = 0;&#13;
					checked[y][x] = true;&#13;
&#13;
					if(x &amp;lt; width - 1) {&#13;
						mark(x + 1, y, value);&#13;
					}&#13;
					if(x &amp;gt; 0) {&#13;
						mark(x - 1, y, value);&#13;
					}&#13;
					if(y &amp;gt; 0) {&#13;
						mark(x, y - 1, value);&#13;
					}&#13;
					if(y &amp;lt; height - 1) {&#13;
						mark(x, y + 1, value);&#13;
					}&#13;
				}&#13;
			}&#13;
&#13;
			/* move empty cells up */&#13;
			function compactDown() {&#13;
				var found = false;&#13;
				for(var x = 0; x &amp;lt; width; x++) {&#13;
					for(var y = 0; y &amp;lt; height - 1; y++) {&#13;
						if(board[y][x] != 0) {&#13;
							if(board[y + 1][x] == 0) {&#13;
								board[y + 1][x] = board[y][x];&#13;
								board[y][x] = 0;&#13;
&#13;
								found = true;&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
				return found;&#13;
			}&#13;
&#13;
			/* move empty cells to right */&#13;
			function compactLeft() {&#13;
				var found = false;&#13;
&#13;
				for(var x = 0; x &amp;lt; width; x++) {&#13;
					var empty = 0;&#13;
&#13;
					for(var y = 0; y &amp;lt; height; y++) {&#13;
						if(board[y][x] == 0) {&#13;
							empty++;&#13;
						}	&#13;
					}&#13;
					/* we have an empty column */&#13;
					if(empty == height) {&#13;
						for(var y = 0; y &amp;lt; height; y++) {&#13;
							for(var lx = x; lx &amp;lt; width - 1; lx++) {&#13;
								board[y][lx] = board[y][lx + 1];&#13;
							}&#13;
							board[y][board[y].length - 1] = 0;&#13;
							found = true;&#13;
						}&#13;
					}&#13;
				}&#13;
&#13;
				return found;&#13;
			}&#13;
&#13;
			/* generate an array with random values of these dimensions */&#13;
			function randomValues(width, height) {&#13;
				var result = new Array();&#13;
&#13;
				for(var y = 0; y &amp;lt; height; y++) {&#13;
					var row = new Array();&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						row.push(Math.round(Math.random() * 10 % (colours.length - 2) + 1));&#13;
					}&#13;
					result.push(row);&#13;
				}&#13;
&#13;
				return result;&#13;
			}&#13;
&#13;
			/* draw the board array as a table */&#13;
			function drawNewBoard() {&#13;
				var result = jQuery(&apos;&amp;lt;table&amp;gt;&amp;lt;/table&amp;gt;&apos;);&#13;
				for(var y = 0; y &amp;lt; board.length; y++) {&#13;
					var tmp = &apos;&amp;lt;tr&amp;gt;&apos;;&#13;
					for(var x = 0; x &amp;lt; board[y].length; x++) {&#13;
						tmp += &apos;&amp;lt;td id=&quot;&apos; + x + &apos;-&apos; + y + &apos;&quot; style=&quot;background: &apos; + colours[board[y][x]] + &apos;;&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/td&amp;gt;&apos;;&#13;
					}&#13;
					tmp += &apos;&amp;lt;/tr&amp;gt;&apos;;&#13;
					result.append(tmp);&#13;
				}&#13;
				/* add the table to the DOM */&#13;
				jQuery(&apos;#board&apos;).append(result);&#13;
			&#13;
		&#13;
				updateBoard();&#13;
			}&#13;
&#13;
			/* redraw board and re-generate unique data attribute */&#13;
			function updateBoard() {&#13;
				/* counter for number of cells that can be clicked */&#13;
				var clickables = 0;&#13;
				/* count all colours in this array */&#13;
				var numCells = new Array();&#13;
				for(var i = 0; i &amp;lt; colours.length; i++) {&#13;
					numCells.push(0);&#13;
				}&#13;
&#13;
				for(var y=0; y &amp;lt; height; y++) {&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						var element = jQuery(&apos;#board #&apos; + x + &apos;-&apos; + y);&#13;
						element.css(&apos;background&apos;, colours[board[y][x]]);&#13;
&#13;
						numCells[board[y][x]]++;&#13;
						element.attr(&apos;data&apos;, Math.random());&#13;
&#13;
						element.unbind(&apos;click&apos;);&#13;
						/* add onclick events only if it is not useless */&#13;
						if(equalNeighbour(x, y)) {&#13;
							clickables++;&#13;
							element.click(cellClicked);&#13;
							element.addClass(&apos;clickable&apos;);&#13;
						} else {&#13;
							element.removeClass(&apos;clickable&apos;);&#13;
						}&#13;
					}&#13;
				}&#13;
			&#13;
				/* check if all colours are gone */&#13;
				if(numCells[0] != (width * height)) {&#13;
					if(clickables == 0) {&#13;
						jQuery(&apos;#board&apos;).append(&apos;No clickables left, game over!&apos;);&#13;
					}&#13;
					return;&#13;
				}&#13;
				&#13;
				/* apparently, there is nothing left, so game finished */&#13;
				jQuery(&apos;#board&apos;).append(&apos;Game finished, well done!&apos;);&#13;
			}&#13;
&#13;
			/* fired when a cell is clicked */&#13;
			function cellClicked() {&#13;
&#13;
				&#13;
					var coords = jQuery(this).attr(&apos;id&apos;).split(&apos;-&apos;);&#13;
					var x = parseInt(coords[0]);&#13;
					var y = parseInt(coords[1]);&#13;
&#13;
					if(equalNeighbour(x, y)) {&#13;
						clearChecked();&#13;
&#13;
						mark(x, y, board[y][x]);&#13;
&#13;
						for(var i = 0; i &amp;lt; height; i++) {&#13;
							if(!compactDown()) {&#13;
								break;&#13;
							}&#13;
						}&#13;
						for(var i = 0; i &amp;lt; width; i++) {&#13;
							if(!compactLeft()) {&#13;
								break;&#13;
							}&#13;
						}&#13;
					}&#13;
				&#13;
					/* redraw to regenerate unique data attribute */&#13;
				&#13;
					updateBoard();&#13;
					&#13;
			}&#13;
&#13;
			jQuery(function() {&#13;
			&#13;
	/*			board=[[2,1,2,1,2], [2,3,2,2,2], [2,2,2,2,1], [1,1,2,1,3], [2,3,2,2,1]];&#13;
				checked=[[false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false]];&#13;
				mark(1,1,3);&#13;
				document.write(board);&#13;
	*/			Math.seedrandom(&apos;10&apos;);&#13;
				board = randomValues(width, height);&#13;
				drawNewBoard();&#13;
		//		updateBoard();	&#13;
				&#13;
				&#13;
				&#13;
			});&#13;
		&lt;/SCRIPT&gt;&#13;
	&#13;
&lt;/HEAD&gt;&#13;
&lt;BODY&gt;&#13;
	&#13;
		&#13;
&lt;DIV id=&quot;board&quot;&gt;&#13;
 	&#13;
		&#13;
&lt;TABLE&gt;&#13;
&lt;TBODY&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.8356950891483325&quot; id=&quot;0-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.4274909487737108&quot; id=&quot;1-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.4635108207605631&quot; id=&quot;2-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.024887884422634017&quot; id=&quot;3-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.8221207729591675&quot; id=&quot;4-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.28692262496972054&quot; id=&quot;0-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.988926341904338&quot; id=&quot;1-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.13165514531824163&quot; id=&quot;2-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.7645315332812135&quot; id=&quot;3-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.4311088843123191&quot; id=&quot;4-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.14105886094837386&quot; id=&quot;0-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.2973779229311896&quot; id=&quot;1-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.24195208436258817&quot; id=&quot;2-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.3388733639485729&quot; id=&quot;3-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.9988714229930106&quot; id=&quot;4-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.32262105684161857&quot; id=&quot;0-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 255);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.5269007614422824&quot; id=&quot;1-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.7989218297488313&quot; id=&quot;2-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 255);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.4693055800583204&quot; id=&quot;3-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.48080128177359177&quot; id=&quot;4-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.9952885992945738&quot; id=&quot;0-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 255);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.9373406961916094&quot; id=&quot;1-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.04254109903251563&quot; id=&quot;2-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.6119001892582699&quot; id=&quot;3-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.05457050694643135&quot; id=&quot;4-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;/TBODY&gt;&#13;
&lt;/TABLE&gt;&#13;
&lt;/DIV&gt;&#13;
&#13;
&#13;
&lt;/BODY&gt;&#13;
&lt;/HTML&gt;&#13;
</string>
    </void>
    <void property="id">
     <long>3</long>
    </void>
    <void property="name">
     <string>state2</string>
    </void>
   </object>
  </void>
  <void method="put">
   <long>4</long>
   <object class="com.crawljax.core.state.StateVertex">
    <void property="dom">
     <string>&lt;HTML xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&#13;
&lt;HEAD&gt;&#13;
&lt;META http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&#13;
&#13;
&lt;META content=&quot;text/html; charset=ISO-8859-1&quot; http-equiv=&quot;content-type&quot;&gt;&#13;
		&#13;
&lt;STYLE type=&quot;text/css&quot;&gt;&#13;
			#board table {&#13;
				border-collapse: collapse;&#13;
			}&#13;
			#board td {&#13;
				height: 25px;&#13;
				width: 25px;&#13;
			}&#13;
		&lt;/STYLE&gt;&#13;
	&#13;
		&#13;
&lt;SCRIPT src=&quot;same-game_files/jquery.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/SCRIPT&gt;&#13;
		&lt;SCRIPT src=&quot;same-game_files/seedrandom-min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/SCRIPT&gt;&#13;
		&#13;
		&lt;SCRIPT type=&quot;text/javascript&quot;&gt;&#13;
			var board = new Array();&#13;
			var checked = new Array();&#13;
			var colours = new Array(&apos;#000&apos;, &apos;#f00&apos;, &apos;#0f0&apos;, &apos;#00f&apos;); //, &apos;#ff0&apos;);*/&#13;
			var width = 5;&#13;
			var height = 5;&#13;
			test3=new Object();&#13;
			&#13;
			&#13;
			/* create a new array same size as the board */&#13;
			function clearChecked() {&#13;
				/* create a &apos;checked&apos; array to make sure we don&apos;t check same&#13;
				   cells over and over again. */&#13;
				&#13;
				&#13;
				test=new Object();&#13;
				test.test1=new Object();&#13;
				test.test1.test2=4;&#13;
				test3.test5=4;&#13;
				checked = new Array();&#13;
				for(var y = 0; y &amp;lt; height; y++) {&#13;
					var row = new Array();&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						row.push(false);&#13;
					}&#13;
					checked.push(row);&#13;
				}&#13;
				&#13;
	&#13;
			}&#13;
&#13;
			/* checks whether the clicked cell has at least one equal&#13;
			   neighbour */&#13;
			function equalNeighbour(x, y) {&#13;
			&#13;
				var value = board[y][x];&#13;
&#13;
				if(value == 0) {&#13;
					return false;&#13;
				}&#13;
&#13;
				if(x &amp;lt; width - 1 &amp;amp;&amp;amp; board[y][x + 1] == value) {&#13;
					return true;&#13;
				}&#13;
				if(x &amp;gt; 0 &amp;amp;&amp;amp; board[y][x - 1] == value) {&#13;
					return true;&#13;
				}&#13;
				if(y &amp;gt; 0 &amp;amp;&amp;amp; board[y - 1][x] == value) {&#13;
					return true;&#13;
				}&#13;
				if(y &amp;lt; height - 1 &amp;amp;&amp;amp; board[y + 1][x] == value) {&#13;
					return true;&#13;
				}&#13;
				return false;&#13;
			}&#13;
&#13;
			/* marks an item and its parents if they have equal colour */&#13;
			function mark(x, y, value) {&#13;
&#13;
&#13;
				if(!checked[y][x] &amp;amp;&amp;amp; board[y][x] &amp;gt; 0&#13;
						&amp;amp;&amp;amp; board[y][x] == value) {&#13;
&#13;
					board[y][x] = 0;&#13;
					checked[y][x] = true;&#13;
&#13;
					if(x &amp;lt; width - 1) {&#13;
						mark(x + 1, y, value);&#13;
					}&#13;
					if(x &amp;gt; 0) {&#13;
						mark(x - 1, y, value);&#13;
					}&#13;
					if(y &amp;gt; 0) {&#13;
						mark(x, y - 1, value);&#13;
					}&#13;
					if(y &amp;lt; height - 1) {&#13;
						mark(x, y + 1, value);&#13;
					}&#13;
				}&#13;
			}&#13;
&#13;
			/* move empty cells up */&#13;
			function compactDown() {&#13;
				var found = false;&#13;
				for(var x = 0; x &amp;lt; width; x++) {&#13;
					for(var y = 0; y &amp;lt; height - 1; y++) {&#13;
						if(board[y][x] != 0) {&#13;
							if(board[y + 1][x] == 0) {&#13;
								board[y + 1][x] = board[y][x];&#13;
								board[y][x] = 0;&#13;
&#13;
								found = true;&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
				return found;&#13;
			}&#13;
&#13;
			/* move empty cells to right */&#13;
			function compactLeft() {&#13;
				var found = false;&#13;
&#13;
				for(var x = 0; x &amp;lt; width; x++) {&#13;
					var empty = 0;&#13;
&#13;
					for(var y = 0; y &amp;lt; height; y++) {&#13;
						if(board[y][x] == 0) {&#13;
							empty++;&#13;
						}	&#13;
					}&#13;
					/* we have an empty column */&#13;
					if(empty == height) {&#13;
						for(var y = 0; y &amp;lt; height; y++) {&#13;
							for(var lx = x; lx &amp;lt; width - 1; lx++) {&#13;
								board[y][lx] = board[y][lx + 1];&#13;
							}&#13;
							board[y][board[y].length - 1] = 0;&#13;
							found = true;&#13;
						}&#13;
					}&#13;
				}&#13;
&#13;
				return found;&#13;
			}&#13;
&#13;
			/* generate an array with random values of these dimensions */&#13;
			function randomValues(width, height) {&#13;
				var result = new Array();&#13;
&#13;
				for(var y = 0; y &amp;lt; height; y++) {&#13;
					var row = new Array();&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						row.push(Math.round(Math.random() * 10 % (colours.length - 2) + 1));&#13;
					}&#13;
					result.push(row);&#13;
				}&#13;
&#13;
				return result;&#13;
			}&#13;
&#13;
			/* draw the board array as a table */&#13;
			function drawNewBoard() {&#13;
				var result = jQuery(&apos;&amp;lt;table&amp;gt;&amp;lt;/table&amp;gt;&apos;);&#13;
				for(var y = 0; y &amp;lt; board.length; y++) {&#13;
					var tmp = &apos;&amp;lt;tr&amp;gt;&apos;;&#13;
					for(var x = 0; x &amp;lt; board[y].length; x++) {&#13;
						tmp += &apos;&amp;lt;td id=&quot;&apos; + x + &apos;-&apos; + y + &apos;&quot; style=&quot;background: &apos; + colours[board[y][x]] + &apos;;&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/td&amp;gt;&apos;;&#13;
					}&#13;
					tmp += &apos;&amp;lt;/tr&amp;gt;&apos;;&#13;
					result.append(tmp);&#13;
				}&#13;
				/* add the table to the DOM */&#13;
				jQuery(&apos;#board&apos;).append(result);&#13;
			&#13;
		&#13;
				updateBoard();&#13;
			}&#13;
&#13;
			/* redraw board and re-generate unique data attribute */&#13;
			function updateBoard() {&#13;
				/* counter for number of cells that can be clicked */&#13;
				var clickables = 0;&#13;
				/* count all colours in this array */&#13;
				var numCells = new Array();&#13;
				for(var i = 0; i &amp;lt; colours.length; i++) {&#13;
					numCells.push(0);&#13;
				}&#13;
&#13;
				for(var y=0; y &amp;lt; height; y++) {&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						var element = jQuery(&apos;#board #&apos; + x + &apos;-&apos; + y);&#13;
						element.css(&apos;background&apos;, colours[board[y][x]]);&#13;
&#13;
						numCells[board[y][x]]++;&#13;
						element.attr(&apos;data&apos;, Math.random());&#13;
&#13;
						element.unbind(&apos;click&apos;);&#13;
						/* add onclick events only if it is not useless */&#13;
						if(equalNeighbour(x, y)) {&#13;
							clickables++;&#13;
							element.click(cellClicked);&#13;
							element.addClass(&apos;clickable&apos;);&#13;
						} else {&#13;
							element.removeClass(&apos;clickable&apos;);&#13;
						}&#13;
					}&#13;
				}&#13;
			&#13;
				/* check if all colours are gone */&#13;
				if(numCells[0] != (width * height)) {&#13;
					if(clickables == 0) {&#13;
						jQuery(&apos;#board&apos;).append(&apos;No clickables left, game over!&apos;);&#13;
					}&#13;
					return;&#13;
				}&#13;
				&#13;
				/* apparently, there is nothing left, so game finished */&#13;
				jQuery(&apos;#board&apos;).append(&apos;Game finished, well done!&apos;);&#13;
			}&#13;
&#13;
			/* fired when a cell is clicked */&#13;
			function cellClicked() {&#13;
&#13;
				&#13;
					var coords = jQuery(this).attr(&apos;id&apos;).split(&apos;-&apos;);&#13;
					var x = parseInt(coords[0]);&#13;
					var y = parseInt(coords[1]);&#13;
&#13;
					if(equalNeighbour(x, y)) {&#13;
						clearChecked();&#13;
&#13;
						mark(x, y, board[y][x]);&#13;
&#13;
						for(var i = 0; i &amp;lt; height; i++) {&#13;
							if(!compactDown()) {&#13;
								break;&#13;
							}&#13;
						}&#13;
						for(var i = 0; i &amp;lt; width; i++) {&#13;
							if(!compactLeft()) {&#13;
								break;&#13;
							}&#13;
						}&#13;
					}&#13;
				&#13;
					/* redraw to regenerate unique data attribute */&#13;
				&#13;
					updateBoard();&#13;
					&#13;
			}&#13;
&#13;
			jQuery(function() {&#13;
			&#13;
	/*			board=[[2,1,2,1,2], [2,3,2,2,2], [2,2,2,2,1], [1,1,2,1,3], [2,3,2,2,1]];&#13;
				checked=[[false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false]];&#13;
				mark(1,1,3);&#13;
				document.write(board);&#13;
	*/			Math.seedrandom(&apos;10&apos;);&#13;
				board = randomValues(width, height);&#13;
				drawNewBoard();&#13;
		//		updateBoard();	&#13;
				&#13;
				&#13;
				&#13;
			});&#13;
		&lt;/SCRIPT&gt;&#13;
	&#13;
&lt;/HEAD&gt;&#13;
&lt;BODY&gt;&#13;
	&#13;
		&#13;
&lt;DIV id=&quot;board&quot;&gt;&#13;
 	&#13;
		&#13;
&lt;TABLE&gt;&#13;
&lt;TBODY&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.17306841142817986&quot; id=&quot;0-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.19257998651350192&quot; id=&quot;1-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.4125816910877636&quot; id=&quot;2-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.6764558439418152&quot; id=&quot;3-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.0647348435390139&quot; id=&quot;4-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.24925169387395424&quot; id=&quot;0-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.7368931113490973&quot; id=&quot;1-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.3675753323009136&quot; id=&quot;2-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.4672827725992006&quot; id=&quot;3-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.9736725955109458&quot; id=&quot;4-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.7399270325196136&quot; id=&quot;0-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.6835563134184242&quot; id=&quot;1-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.8747531761575206&quot; id=&quot;2-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.7171843491416102&quot; id=&quot;3-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.2813857632507306&quot; id=&quot;4-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.28895777701063957&quot; id=&quot;0-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 255);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.5739389033742391&quot; id=&quot;1-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.0961716714135766&quot; id=&quot;2-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.9630408836167552&quot; id=&quot;3-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.6841992263596576&quot; id=&quot;4-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.3744027573529413&quot; id=&quot;0-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 255);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.4402495191145523&quot; id=&quot;1-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 255);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.6978540663044647&quot; id=&quot;2-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.5749419664374061&quot; id=&quot;3-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.42439679288324683&quot; id=&quot;4-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;/TBODY&gt;&#13;
&lt;/TABLE&gt;&#13;
&lt;/DIV&gt;&#13;
&#13;
&#13;
&lt;/BODY&gt;&#13;
&lt;/HTML&gt;&#13;
</string>
    </void>
    <void property="id">
     <long>4</long>
    </void>
    <void property="name">
     <string>state3</string>
    </void>
   </object>
  </void>
  <void method="put">
   <long>5</long>
   <object class="com.crawljax.core.state.StateVertex">
    <void property="dom">
     <string>&lt;HTML xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&#13;
&lt;HEAD&gt;&#13;
&lt;META http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&#13;
&#13;
&lt;META content=&quot;text/html; charset=ISO-8859-1&quot; http-equiv=&quot;content-type&quot;&gt;&#13;
		&#13;
&lt;STYLE type=&quot;text/css&quot;&gt;&#13;
			#board table {&#13;
				border-collapse: collapse;&#13;
			}&#13;
			#board td {&#13;
				height: 25px;&#13;
				width: 25px;&#13;
			}&#13;
		&lt;/STYLE&gt;&#13;
	&#13;
		&#13;
&lt;SCRIPT src=&quot;same-game_files/jquery.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/SCRIPT&gt;&#13;
		&lt;SCRIPT src=&quot;same-game_files/seedrandom-min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/SCRIPT&gt;&#13;
		&#13;
		&lt;SCRIPT type=&quot;text/javascript&quot;&gt;&#13;
			var board = new Array();&#13;
			var checked = new Array();&#13;
			var colours = new Array(&apos;#000&apos;, &apos;#f00&apos;, &apos;#0f0&apos;, &apos;#00f&apos;); //, &apos;#ff0&apos;);*/&#13;
			var width = 5;&#13;
			var height = 5;&#13;
			test3=new Object();&#13;
			&#13;
			&#13;
			/* create a new array same size as the board */&#13;
			function clearChecked() {&#13;
				/* create a &apos;checked&apos; array to make sure we don&apos;t check same&#13;
				   cells over and over again. */&#13;
				&#13;
				&#13;
				test=new Object();&#13;
				test.test1=new Object();&#13;
				test.test1.test2=4;&#13;
				test3.test5=4;&#13;
				checked = new Array();&#13;
				for(var y = 0; y &amp;lt; height; y++) {&#13;
					var row = new Array();&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						row.push(false);&#13;
					}&#13;
					checked.push(row);&#13;
				}&#13;
				&#13;
	&#13;
			}&#13;
&#13;
			/* checks whether the clicked cell has at least one equal&#13;
			   neighbour */&#13;
			function equalNeighbour(x, y) {&#13;
			&#13;
				var value = board[y][x];&#13;
&#13;
				if(value == 0) {&#13;
					return false;&#13;
				}&#13;
&#13;
				if(x &amp;lt; width - 1 &amp;amp;&amp;amp; board[y][x + 1] == value) {&#13;
					return true;&#13;
				}&#13;
				if(x &amp;gt; 0 &amp;amp;&amp;amp; board[y][x - 1] == value) {&#13;
					return true;&#13;
				}&#13;
				if(y &amp;gt; 0 &amp;amp;&amp;amp; board[y - 1][x] == value) {&#13;
					return true;&#13;
				}&#13;
				if(y &amp;lt; height - 1 &amp;amp;&amp;amp; board[y + 1][x] == value) {&#13;
					return true;&#13;
				}&#13;
				return false;&#13;
			}&#13;
&#13;
			/* marks an item and its parents if they have equal colour */&#13;
			function mark(x, y, value) {&#13;
&#13;
&#13;
				if(!checked[y][x] &amp;amp;&amp;amp; board[y][x] &amp;gt; 0&#13;
						&amp;amp;&amp;amp; board[y][x] == value) {&#13;
&#13;
					board[y][x] = 0;&#13;
					checked[y][x] = true;&#13;
&#13;
					if(x &amp;lt; width - 1) {&#13;
						mark(x + 1, y, value);&#13;
					}&#13;
					if(x &amp;gt; 0) {&#13;
						mark(x - 1, y, value);&#13;
					}&#13;
					if(y &amp;gt; 0) {&#13;
						mark(x, y - 1, value);&#13;
					}&#13;
					if(y &amp;lt; height - 1) {&#13;
						mark(x, y + 1, value);&#13;
					}&#13;
				}&#13;
			}&#13;
&#13;
			/* move empty cells up */&#13;
			function compactDown() {&#13;
				var found = false;&#13;
				for(var x = 0; x &amp;lt; width; x++) {&#13;
					for(var y = 0; y &amp;lt; height - 1; y++) {&#13;
						if(board[y][x] != 0) {&#13;
							if(board[y + 1][x] == 0) {&#13;
								board[y + 1][x] = board[y][x];&#13;
								board[y][x] = 0;&#13;
&#13;
								found = true;&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
				return found;&#13;
			}&#13;
&#13;
			/* move empty cells to right */&#13;
			function compactLeft() {&#13;
				var found = false;&#13;
&#13;
				for(var x = 0; x &amp;lt; width; x++) {&#13;
					var empty = 0;&#13;
&#13;
					for(var y = 0; y &amp;lt; height; y++) {&#13;
						if(board[y][x] == 0) {&#13;
							empty++;&#13;
						}	&#13;
					}&#13;
					/* we have an empty column */&#13;
					if(empty == height) {&#13;
						for(var y = 0; y &amp;lt; height; y++) {&#13;
							for(var lx = x; lx &amp;lt; width - 1; lx++) {&#13;
								board[y][lx] = board[y][lx + 1];&#13;
							}&#13;
							board[y][board[y].length - 1] = 0;&#13;
							found = true;&#13;
						}&#13;
					}&#13;
				}&#13;
&#13;
				return found;&#13;
			}&#13;
&#13;
			/* generate an array with random values of these dimensions */&#13;
			function randomValues(width, height) {&#13;
				var result = new Array();&#13;
&#13;
				for(var y = 0; y &amp;lt; height; y++) {&#13;
					var row = new Array();&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						row.push(Math.round(Math.random() * 10 % (colours.length - 2) + 1));&#13;
					}&#13;
					result.push(row);&#13;
				}&#13;
&#13;
				return result;&#13;
			}&#13;
&#13;
			/* draw the board array as a table */&#13;
			function drawNewBoard() {&#13;
				var result = jQuery(&apos;&amp;lt;table&amp;gt;&amp;lt;/table&amp;gt;&apos;);&#13;
				for(var y = 0; y &amp;lt; board.length; y++) {&#13;
					var tmp = &apos;&amp;lt;tr&amp;gt;&apos;;&#13;
					for(var x = 0; x &amp;lt; board[y].length; x++) {&#13;
						tmp += &apos;&amp;lt;td id=&quot;&apos; + x + &apos;-&apos; + y + &apos;&quot; style=&quot;background: &apos; + colours[board[y][x]] + &apos;;&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/td&amp;gt;&apos;;&#13;
					}&#13;
					tmp += &apos;&amp;lt;/tr&amp;gt;&apos;;&#13;
					result.append(tmp);&#13;
				}&#13;
				/* add the table to the DOM */&#13;
				jQuery(&apos;#board&apos;).append(result);&#13;
			&#13;
		&#13;
				updateBoard();&#13;
			}&#13;
&#13;
			/* redraw board and re-generate unique data attribute */&#13;
			function updateBoard() {&#13;
				/* counter for number of cells that can be clicked */&#13;
				var clickables = 0;&#13;
				/* count all colours in this array */&#13;
				var numCells = new Array();&#13;
				for(var i = 0; i &amp;lt; colours.length; i++) {&#13;
					numCells.push(0);&#13;
				}&#13;
&#13;
				for(var y=0; y &amp;lt; height; y++) {&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						var element = jQuery(&apos;#board #&apos; + x + &apos;-&apos; + y);&#13;
						element.css(&apos;background&apos;, colours[board[y][x]]);&#13;
&#13;
						numCells[board[y][x]]++;&#13;
						element.attr(&apos;data&apos;, Math.random());&#13;
&#13;
						element.unbind(&apos;click&apos;);&#13;
						/* add onclick events only if it is not useless */&#13;
						if(equalNeighbour(x, y)) {&#13;
							clickables++;&#13;
							element.click(cellClicked);&#13;
							element.addClass(&apos;clickable&apos;);&#13;
						} else {&#13;
							element.removeClass(&apos;clickable&apos;);&#13;
						}&#13;
					}&#13;
				}&#13;
			&#13;
				/* check if all colours are gone */&#13;
				if(numCells[0] != (width * height)) {&#13;
					if(clickables == 0) {&#13;
						jQuery(&apos;#board&apos;).append(&apos;No clickables left, game over!&apos;);&#13;
					}&#13;
					return;&#13;
				}&#13;
				&#13;
				/* apparently, there is nothing left, so game finished */&#13;
				jQuery(&apos;#board&apos;).append(&apos;Game finished, well done!&apos;);&#13;
			}&#13;
&#13;
			/* fired when a cell is clicked */&#13;
			function cellClicked() {&#13;
&#13;
				&#13;
					var coords = jQuery(this).attr(&apos;id&apos;).split(&apos;-&apos;);&#13;
					var x = parseInt(coords[0]);&#13;
					var y = parseInt(coords[1]);&#13;
&#13;
					if(equalNeighbour(x, y)) {&#13;
						clearChecked();&#13;
&#13;
						mark(x, y, board[y][x]);&#13;
&#13;
						for(var i = 0; i &amp;lt; height; i++) {&#13;
							if(!compactDown()) {&#13;
								break;&#13;
							}&#13;
						}&#13;
						for(var i = 0; i &amp;lt; width; i++) {&#13;
							if(!compactLeft()) {&#13;
								break;&#13;
							}&#13;
						}&#13;
					}&#13;
				&#13;
					/* redraw to regenerate unique data attribute */&#13;
				&#13;
					updateBoard();&#13;
					&#13;
			}&#13;
&#13;
			jQuery(function() {&#13;
			&#13;
	/*			board=[[2,1,2,1,2], [2,3,2,2,2], [2,2,2,2,1], [1,1,2,1,3], [2,3,2,2,1]];&#13;
				checked=[[false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false]];&#13;
				mark(1,1,3);&#13;
				document.write(board);&#13;
	*/			Math.seedrandom(&apos;10&apos;);&#13;
				board = randomValues(width, height);&#13;
				drawNewBoard();&#13;
		//		updateBoard();	&#13;
				&#13;
				&#13;
				&#13;
			});&#13;
		&lt;/SCRIPT&gt;&#13;
	&#13;
&lt;/HEAD&gt;&#13;
&lt;BODY&gt;&#13;
	&#13;
		&#13;
&lt;DIV id=&quot;board&quot;&gt;&#13;
 	&#13;
		&#13;
&lt;TABLE&gt;&#13;
&lt;TBODY&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.0779662388435579&quot; id=&quot;0-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.9851124054052374&quot; id=&quot;1-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.39942895705630266&quot; id=&quot;2-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.3600260334222914&quot; id=&quot;3-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.16420298715790083&quot; id=&quot;4-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.5668219381472338&quot; id=&quot;0-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.86979908224596&quot; id=&quot;1-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.22410183383850796&quot; id=&quot;2-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.5226969492018476&quot; id=&quot;3-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.45102355063620014&quot; id=&quot;4-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.05019117062271554&quot; id=&quot;0-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.4731845077250818&quot; id=&quot;1-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.8173431752839231&quot; id=&quot;2-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.2268778980238463&quot; id=&quot;3-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.015626021252634684&quot; id=&quot;4-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.762355909624905&quot; id=&quot;0-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.06207037855145761&quot; id=&quot;1-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.921318902154341&quot; id=&quot;2-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.6376252827320888&quot; id=&quot;3-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.3487076669600524&quot; id=&quot;4-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;clickable&quot; data=&quot;0.2538960036384832&quot; id=&quot;0-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;clickable&quot; data=&quot;0.11002079652561617&quot; id=&quot;1-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.8224581031340771&quot; id=&quot;2-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.11237704815002077&quot; id=&quot;3-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.612509921586873&quot; id=&quot;4-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;/TBODY&gt;&#13;
&lt;/TABLE&gt;&#13;
&lt;/DIV&gt;&#13;
&#13;
&#13;
&lt;/BODY&gt;&#13;
&lt;/HTML&gt;&#13;
</string>
    </void>
    <void property="id">
     <long>5</long>
    </void>
    <void property="name">
     <string>state4</string>
    </void>
   </object>
  </void>
  <void method="put">
   <long>6</long>
   <object class="com.crawljax.core.state.StateVertex">
    <void property="dom">
     <string>&lt;HTML xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&#13;
&lt;HEAD&gt;&#13;
&lt;META http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&#13;
&#13;
&lt;META content=&quot;text/html; charset=ISO-8859-1&quot; http-equiv=&quot;content-type&quot;&gt;&#13;
		&#13;
&lt;STYLE type=&quot;text/css&quot;&gt;&#13;
			#board table {&#13;
				border-collapse: collapse;&#13;
			}&#13;
			#board td {&#13;
				height: 25px;&#13;
				width: 25px;&#13;
			}&#13;
		&lt;/STYLE&gt;&#13;
	&#13;
		&#13;
&lt;SCRIPT src=&quot;same-game_files/jquery.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/SCRIPT&gt;&#13;
		&lt;SCRIPT src=&quot;same-game_files/seedrandom-min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/SCRIPT&gt;&#13;
		&#13;
		&lt;SCRIPT type=&quot;text/javascript&quot;&gt;&#13;
			var board = new Array();&#13;
			var checked = new Array();&#13;
			var colours = new Array(&apos;#000&apos;, &apos;#f00&apos;, &apos;#0f0&apos;, &apos;#00f&apos;); //, &apos;#ff0&apos;);*/&#13;
			var width = 5;&#13;
			var height = 5;&#13;
			test3=new Object();&#13;
			&#13;
			&#13;
			/* create a new array same size as the board */&#13;
			function clearChecked() {&#13;
				/* create a &apos;checked&apos; array to make sure we don&apos;t check same&#13;
				   cells over and over again. */&#13;
				&#13;
				&#13;
				test=new Object();&#13;
				test.test1=new Object();&#13;
				test.test1.test2=4;&#13;
				test3.test5=4;&#13;
				checked = new Array();&#13;
				for(var y = 0; y &amp;lt; height; y++) {&#13;
					var row = new Array();&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						row.push(false);&#13;
					}&#13;
					checked.push(row);&#13;
				}&#13;
				&#13;
	&#13;
			}&#13;
&#13;
			/* checks whether the clicked cell has at least one equal&#13;
			   neighbour */&#13;
			function equalNeighbour(x, y) {&#13;
			&#13;
				var value = board[y][x];&#13;
&#13;
				if(value == 0) {&#13;
					return false;&#13;
				}&#13;
&#13;
				if(x &amp;lt; width - 1 &amp;amp;&amp;amp; board[y][x + 1] == value) {&#13;
					return true;&#13;
				}&#13;
				if(x &amp;gt; 0 &amp;amp;&amp;amp; board[y][x - 1] == value) {&#13;
					return true;&#13;
				}&#13;
				if(y &amp;gt; 0 &amp;amp;&amp;amp; board[y - 1][x] == value) {&#13;
					return true;&#13;
				}&#13;
				if(y &amp;lt; height - 1 &amp;amp;&amp;amp; board[y + 1][x] == value) {&#13;
					return true;&#13;
				}&#13;
				return false;&#13;
			}&#13;
&#13;
			/* marks an item and its parents if they have equal colour */&#13;
			function mark(x, y, value) {&#13;
&#13;
&#13;
				if(!checked[y][x] &amp;amp;&amp;amp; board[y][x] &amp;gt; 0&#13;
						&amp;amp;&amp;amp; board[y][x] == value) {&#13;
&#13;
					board[y][x] = 0;&#13;
					checked[y][x] = true;&#13;
&#13;
					if(x &amp;lt; width - 1) {&#13;
						mark(x + 1, y, value);&#13;
					}&#13;
					if(x &amp;gt; 0) {&#13;
						mark(x - 1, y, value);&#13;
					}&#13;
					if(y &amp;gt; 0) {&#13;
						mark(x, y - 1, value);&#13;
					}&#13;
					if(y &amp;lt; height - 1) {&#13;
						mark(x, y + 1, value);&#13;
					}&#13;
				}&#13;
			}&#13;
&#13;
			/* move empty cells up */&#13;
			function compactDown() {&#13;
				var found = false;&#13;
				for(var x = 0; x &amp;lt; width; x++) {&#13;
					for(var y = 0; y &amp;lt; height - 1; y++) {&#13;
						if(board[y][x] != 0) {&#13;
							if(board[y + 1][x] == 0) {&#13;
								board[y + 1][x] = board[y][x];&#13;
								board[y][x] = 0;&#13;
&#13;
								found = true;&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
				return found;&#13;
			}&#13;
&#13;
			/* move empty cells to right */&#13;
			function compactLeft() {&#13;
				var found = false;&#13;
&#13;
				for(var x = 0; x &amp;lt; width; x++) {&#13;
					var empty = 0;&#13;
&#13;
					for(var y = 0; y &amp;lt; height; y++) {&#13;
						if(board[y][x] == 0) {&#13;
							empty++;&#13;
						}	&#13;
					}&#13;
					/* we have an empty column */&#13;
					if(empty == height) {&#13;
						for(var y = 0; y &amp;lt; height; y++) {&#13;
							for(var lx = x; lx &amp;lt; width - 1; lx++) {&#13;
								board[y][lx] = board[y][lx + 1];&#13;
							}&#13;
							board[y][board[y].length - 1] = 0;&#13;
							found = true;&#13;
						}&#13;
					}&#13;
				}&#13;
&#13;
				return found;&#13;
			}&#13;
&#13;
			/* generate an array with random values of these dimensions */&#13;
			function randomValues(width, height) {&#13;
				var result = new Array();&#13;
&#13;
				for(var y = 0; y &amp;lt; height; y++) {&#13;
					var row = new Array();&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						row.push(Math.round(Math.random() * 10 % (colours.length - 2) + 1));&#13;
					}&#13;
					result.push(row);&#13;
				}&#13;
&#13;
				return result;&#13;
			}&#13;
&#13;
			/* draw the board array as a table */&#13;
			function drawNewBoard() {&#13;
				var result = jQuery(&apos;&amp;lt;table&amp;gt;&amp;lt;/table&amp;gt;&apos;);&#13;
				for(var y = 0; y &amp;lt; board.length; y++) {&#13;
					var tmp = &apos;&amp;lt;tr&amp;gt;&apos;;&#13;
					for(var x = 0; x &amp;lt; board[y].length; x++) {&#13;
						tmp += &apos;&amp;lt;td id=&quot;&apos; + x + &apos;-&apos; + y + &apos;&quot; style=&quot;background: &apos; + colours[board[y][x]] + &apos;;&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/td&amp;gt;&apos;;&#13;
					}&#13;
					tmp += &apos;&amp;lt;/tr&amp;gt;&apos;;&#13;
					result.append(tmp);&#13;
				}&#13;
				/* add the table to the DOM */&#13;
				jQuery(&apos;#board&apos;).append(result);&#13;
			&#13;
		&#13;
				updateBoard();&#13;
			}&#13;
&#13;
			/* redraw board and re-generate unique data attribute */&#13;
			function updateBoard() {&#13;
				/* counter for number of cells that can be clicked */&#13;
				var clickables = 0;&#13;
				/* count all colours in this array */&#13;
				var numCells = new Array();&#13;
				for(var i = 0; i &amp;lt; colours.length; i++) {&#13;
					numCells.push(0);&#13;
				}&#13;
&#13;
				for(var y=0; y &amp;lt; height; y++) {&#13;
					for(var x = 0; x &amp;lt; width; x++) {&#13;
						var element = jQuery(&apos;#board #&apos; + x + &apos;-&apos; + y);&#13;
						element.css(&apos;background&apos;, colours[board[y][x]]);&#13;
&#13;
						numCells[board[y][x]]++;&#13;
						element.attr(&apos;data&apos;, Math.random());&#13;
&#13;
						element.unbind(&apos;click&apos;);&#13;
						/* add onclick events only if it is not useless */&#13;
						if(equalNeighbour(x, y)) {&#13;
							clickables++;&#13;
							element.click(cellClicked);&#13;
							element.addClass(&apos;clickable&apos;);&#13;
						} else {&#13;
							element.removeClass(&apos;clickable&apos;);&#13;
						}&#13;
					}&#13;
				}&#13;
			&#13;
				/* check if all colours are gone */&#13;
				if(numCells[0] != (width * height)) {&#13;
					if(clickables == 0) {&#13;
						jQuery(&apos;#board&apos;).append(&apos;No clickables left, game over!&apos;);&#13;
					}&#13;
					return;&#13;
				}&#13;
				&#13;
				/* apparently, there is nothing left, so game finished */&#13;
				jQuery(&apos;#board&apos;).append(&apos;Game finished, well done!&apos;);&#13;
			}&#13;
&#13;
			/* fired when a cell is clicked */&#13;
			function cellClicked() {&#13;
&#13;
				&#13;
					var coords = jQuery(this).attr(&apos;id&apos;).split(&apos;-&apos;);&#13;
					var x = parseInt(coords[0]);&#13;
					var y = parseInt(coords[1]);&#13;
&#13;
					if(equalNeighbour(x, y)) {&#13;
						clearChecked();&#13;
&#13;
						mark(x, y, board[y][x]);&#13;
&#13;
						for(var i = 0; i &amp;lt; height; i++) {&#13;
							if(!compactDown()) {&#13;
								break;&#13;
							}&#13;
						}&#13;
						for(var i = 0; i &amp;lt; width; i++) {&#13;
							if(!compactLeft()) {&#13;
								break;&#13;
							}&#13;
						}&#13;
					}&#13;
				&#13;
					/* redraw to regenerate unique data attribute */&#13;
				&#13;
					updateBoard();&#13;
					&#13;
			}&#13;
&#13;
			jQuery(function() {&#13;
			&#13;
	/*			board=[[2,1,2,1,2], [2,3,2,2,2], [2,2,2,2,1], [1,1,2,1,3], [2,3,2,2,1]];&#13;
				checked=[[false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false], [false,false,false,false,false]];&#13;
				mark(1,1,3);&#13;
				document.write(board);&#13;
	*/			Math.seedrandom(&apos;10&apos;);&#13;
				board = randomValues(width, height);&#13;
				drawNewBoard();&#13;
		//		updateBoard();	&#13;
				&#13;
				&#13;
				&#13;
			});&#13;
		&lt;/SCRIPT&gt;&#13;
	&#13;
&lt;/HEAD&gt;&#13;
&lt;BODY&gt;&#13;
	&#13;
		&#13;
&lt;DIV id=&quot;board&quot;&gt;&#13;
 	&#13;
		&#13;
&lt;TABLE&gt;&#13;
&lt;TBODY&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.520382046300693&quot; id=&quot;0-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.4615523514365264&quot; id=&quot;1-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.813652995664504&quot; id=&quot;2-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.08779666578306838&quot; id=&quot;3-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.5884242662549187&quot; id=&quot;4-0&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.5518926862133925&quot; id=&quot;0-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.18032718154436697&quot; id=&quot;1-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.7667474519765439&quot; id=&quot;2-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.2244982225024155&quot; id=&quot;3-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.3349711357905192&quot; id=&quot;4-1&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.006921093713981941&quot; id=&quot;0-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.5755053792785851&quot; id=&quot;1-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.26406663076899095&quot; id=&quot;2-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.7954963067500153&quot; id=&quot;3-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.7423911906396042&quot; id=&quot;4-2&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.3896464399707428&quot; id=&quot;0-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.9563645057965947&quot; id=&quot;1-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.9838764370896159&quot; id=&quot;2-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.017248531267632747&quot; id=&quot;3-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.3959475942624442&quot; id=&quot;4-3&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;TR&gt;&#13;
&lt;TD class=&quot;&quot; data=&quot;0.6592996443860587&quot; id=&quot;0-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.21163342730459267&quot; id=&quot;1-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.5858385582645833&quot; id=&quot;2-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD class=&quot;&quot; data=&quot;0.37052329514359506&quot; id=&quot;3-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD data=&quot;0.46342180594565646&quot; id=&quot;4-4&quot; style=&quot;background: none repeat scroll 0% 0% rgb(0, 0, 0);&quot;&gt;&amp;nbsp;&lt;/TD&gt;&#13;
&lt;/TR&gt;&#13;
&lt;/TBODY&gt;&#13;
&lt;/TABLE&gt;Game finished, well done!&lt;/DIV&gt;&#13;
&#13;
&#13;
&lt;/BODY&gt;&#13;
&lt;/HTML&gt;&#13;
</string>
    </void>
    <void property="id">
     <long>6</long>
    </void>
    <void property="name">
     <string>state5</string>
    </void>
   </object>
  </void>
 </object>
</java>
